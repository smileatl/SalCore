//BaseQuark 就是一个 uint32 的整型，每一个整形值的背后都有一个字符串，也就是说每个GQuark 和 唯一 一个 字符串对应，这个对应关系和唯一性保障由框架来负责。
//为了在程序中标识一块数据，你一般有两种方式可选：数字或字符串。但是这两者都有一些缺点。数字是非常难以辨认的。如果你开始粗略的知道需要多少标签，你就可以定义一个枚举类型和一些字符符号。但是，你没法在运行的时候动态添加标签。
//另一方面，你可以在运行的时候动态的添加或修改字符串，而且它们是很容易理解的。 但是，字符串比较要比数字比较花更长的时间，而且在内存中管理字符串有一些你可能不愿意处理的额外麻烦。
//提供了GQuark类型，它整合了数字的简单和字符串的易用。在它内部，它就是一个易于比较和复制的整形数。框架将这些数字映射为你的字符串，并且你可以在任何时间取得字符串所对应的值。

#ifndef BASE_QUARK_H
#define BASE_QUARK_H

#include <base.h>





#endif // BASE_QUARK_H