name: Windows

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "trunk" ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Default
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
          - name: Default x86
            os: windows-latest
            triplet: x86-windows
            arch: x86
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
          - name: Use Expat
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
            packages: expat
            config: >-
              -DAPR_XML_BACKEND=expat
          - name: Use Libxml2
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
            packages: libxml2
            config: >-
              -DAPR_XML_BACKEND=libxml2
          - name: Use XmlLite
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
            config: >-
              -DAPR_XML_BACKEND=xmllite
          - name: Shared (no DSO)
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: OFF
          - name: Minimal
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: OFF
            config: >-
              -DAPU_HAVE_ODBC=OFF
              -DAPU_HAVE_SQLITE3=OFF
              -DAPU_HAVE_CRYPTO=OFF
          - name: "Shared: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)"
            os: windows-latest
            triplet: x64-windows
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: ON
            dso-build: ON
            packages: sqlite3 openssl libiconv libpq[core]
            config: >-
              -DAPU_HAVE_ODBC=ON
              -DAPU_HAVE_SQLITE3=ON
              -DAPU_HAVE_PGSQL=ON
              -DAPU_HAVE_CRYPTO=ON
              -DAPU_HAVE_ICONV=ON
          - name: "Static: All (ODBC + Sqlite3 + PostgreSQL + Crypto + Iconv)"
            os: windows-latest
            triplet: x64-windows-static
            arch: x64
            build-type: Debug
            generator: Ninja
            build-shared: OFF
            dso-build: OFF
            packages: sqlite3 openssl libiconv libpq[core]
            config: >-
              -DAPU_HAVE_ODBC=ON
              -DAPU_HAVE_SQLITE3=ON
              -DAPU_HAVE_PGSQL=ON
              -DAPU_HAVE_CRYPTO=ON
              -DAPU_HAVE_ICONV=ON
      fail-fast: false

    name: ${{ matrix.name }}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install dependencies
      if: ${{ matrix.packages != '' }}
      run: vcpkg install --triplet ${{ matrix.triplet }} ${{ matrix.packages }}

    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }}
        cmake -B ${{github.workspace}}/build ^
          -G "${{ matrix.generator }}" ^
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ^
          -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} ^
          -DAPR_MODULAR_DSO=${{ matrix.dso-build }} ^
          -DAPR_BUILD_TESTAPR=ON ^
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ^
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} ^
          ${{ matrix.config }}

    - name: Build
      # Build your program with the given configuration
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }}
        cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build-type }} --output-on-failure

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{ matrix.build-type }}
