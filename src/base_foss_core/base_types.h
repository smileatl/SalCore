#pragma once

#include "base.h"

typedef enum {
	SCF_NONE = 0,
	SCF_USE_SQL = (1 << 0),
	SCF_NO_NEW_OUTBOUND_SESSIONS = (1 << 1),
	SCF_NO_NEW_INBOUND_SESSIONS = (1 << 2),
	SCF_NO_NEW_SESSIONS = (SCF_NO_NEW_OUTBOUND_SESSIONS | SCF_NO_NEW_INBOUND_SESSIONS),
	SCF_SHUTTING_DOWN = (1 << 3),
	SCF_VG = (1 << 4),
	SCF_RESTART = (1 << 5),
	SCF_SHUTDOWN_REQUESTED = (1 << 6),
	SCF_USE_AUTO_NAT = (1 << 7),
	SCF_EARLY_HANGUP = (1 << 8),
	SCF_CALIBRATE_CLOCK = (1 << 9),
	SCF_USE_HEAVY_TIMING = (1 << 10),
	SCF_USE_CLOCK_RT = (1 << 11),
	SCF_VERBOSE_EVENTS = (1 << 12),
	SCF_USE_WIN32_MONOTONIC = (1 << 13),
	SCF_AUTO_SCHEMAS = (1 << 14),
	SCF_MINIMAL = (1 << 15),
	SCF_USE_NAT_MAPPING = (1 << 16),
	SCF_CLEAR_SQL = (1 << 17),
	SCF_THREADED_SYSTEM_EXEC = (1 << 18),
	SCF_SYNC_CLOCK_REQUESTED = (1 << 19),
	SCF_CORE_NON_SQLITE_DB_REQ = (1 << 20),
	SCF_DEBUG_SQL = (1 << 21),
	SCF_API_EXPANSION = (1 << 22),
	SCF_SESSION_THREAD_POOL = (1 << 23),
	SCF_DIALPLAN_TIMESTAMPS = (1 << 24),
	SCF_CPF_SOFT_PREFIX = (1 << 25),
	SCF_CPF_SOFT_LOOKUP = (1 << 26),
	SCF_EVENT_CHANNEL_ENABLE_HIERARCHY_DELIVERY = (1 << 27),
	SCF_EVENT_CHANNEL_HIERARCHY_DELIVERY_ONCE = (1 << 28),
	SCF_EVENT_CHANNEL_LOG_UNDELIVERABLE_JSON = (1 << 29),
	SCF_LOG_DISABLE = (1 << 30)
} base_core_flag_enum_t;
typedef uint32_t base_core_flag_t;

typedef enum {
	SCSC_PAUSE_INBOUND,
	SCSC_PAUSE_OUTBOUND,
	SCSC_PAUSE_ALL,
	SCSC_HUPALL,
	SCSC_SHUTDOWN,
	SCSC_CHECK_RUNNING,
	SCSC_LOGLEVEL,
	SCSC_SPS,
	SCSC_LAST_SPS,
	SCSC_RECLAIM,
	SCSC_MAX_SESSIONS,
	SCSC_SYNC_CLOCK,
	SCSC_MAX_DTMF_DURATION,
	SCSC_MIN_DTMF_DURATION,
	SCSC_DEFAULT_DTMF_DURATION,
	SCSC_SHUTDOWN_ELEGANT,
	SCSC_SHUTDOWN_ASAP,
	SCSC_CANCEL_SHUTDOWN,
	SCSC_SEND_SIGHUP,
	SCSC_DEBUG_LEVEL,
	SCSC_FLUSH_DB_HANDLES,
	SCSC_SHUTDOWN_NOW,
	SCSC_REINCARNATE_NOW,
	SCSC_CALIBRATE_CLOCK,
	SCSC_SAVE_HISTORY,
	SCSC_CRASH,
	SCSC_MIN_IDLE_CPU,
	SCSC_VERBOSE_EVENTS,
	SCSC_SHUTDOWN_CHECK,
	SCSC_PAUSE_INBOUND_CHECK,
	SCSC_PAUSE_OUTBOUND_CHECK,
	SCSC_PAUSE_CHECK,
	SCSC_READY_CHECK,
	SCSC_THREADED_SYSTEM_EXEC,
	SCSC_SYNC_CLOCK_WHEN_IDLE,
	SCSC_DEBUG_SQL,
	SCSC_SQL,
	SCSC_API_EXPANSION,
	SCSC_RECOVER,
	SCSC_SPS_PEAK,
	SCSC_SPS_PEAK_FIVEMIN,
	SCSC_SESSIONS_PEAK,
	SCSC_SESSIONS_PEAK_FIVEMIN,
	SCSC_MDNS_RESOLVE,
	SCSC_SHUTDOWN_CAUSE
} base_session_ctl_t;


typedef enum {
	BASE_STATUS_SUCCESS,
	BASE_STATUS_FALSE,
	BASE_STATUS_TIMEOUT,
	BASE_STATUS_RESTART,
	BASE_STATUS_INTR,
	BASE_STATUS_NOTIMPL,
	BASE_STATUS_MEMERR,
	BASE_STATUS_NOOP,
	BASE_STATUS_RESAMPLE,
	BASE_STATUS_GENERR,
	BASE_STATUS_INUSE,
	BASE_STATUS_BREAK,
	BASE_STATUS_SOCKERR,
	BASE_STATUS_MORE_DATA,
	BASE_STATUS_NOTFOUND,
	BASE_STATUS_UNLOAD,
	BASE_STATUS_NOUNLOAD,
	BASE_STATUS_IGNORE,
	BASE_STATUS_TOO_SMALL,
	BASE_STATUS_FOUND,
	BASE_STATUS_CONTINUE,
	BASE_STATUS_TERM,
	BASE_STATUS_NOT_INITALIZED,
	BASE_STATUS_TOO_LATE,
	BASE_STATUS_XBREAK = 35,
	BASE_STATUS_WINBREAK = 730035
} base_status_t;

struct base_directories {
	char *base_dir;
	char *mod_dir;
	char *conf_dir;
	char *log_dir;
	char *run_dir;
	char *db_dir;
	char *script_dir;
	char *temp_dir;
	char *htdocs_dir;
	char *grammar_dir;
	char *storage_dir;
	char *cache_dir;
	char *recordings_dir;
	char *sounds_dir;
	char *lib_dir;
	char *certs_dir;
	char *fonts_dir;
	char *images_dir;
	char *data_dir;
	char *localstate_dir;
};

typedef struct base_directories base_directories;
BASE_DECLARE_DATA extern base_directories BASE_GLOBAL_dirs;

struct base_filenames {
    char *conf_name;
};

typedef struct base_filenames base_filenames;
BASE_DECLARE_DATA extern base_filenames BASE_GLOBAL_filenames;